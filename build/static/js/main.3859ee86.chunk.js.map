{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCRpCK,EAAU,aAyBDC,EADK,CAAEC,OAtBP,WACb,IAAMC,EAAUC,IAAMC,IAAIL,GAEpBM,EAAc,CAClBC,GAAI,IACJT,QAAS,mCACTU,KAAM,2BACNZ,WAAW,GAEb,OAAOO,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAazBO,OAVf,SAAAC,GAEb,OADgBV,IAAMW,KAAKf,EAASc,GACrBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQLK,OALvB,SAACT,EAAIO,GAElB,OADgBV,IAAMa,IAAN,UAAajB,EAAb,YAAwBO,GAAMO,GAC/BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCR5BO,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKtB,UAAU,QAAf,SACGsB,KCOQC,EAdA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GCqFSC,G,MAzFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAOhBC,qBAAU,WACRlC,EACGC,SACAO,MAAK,SAAA2B,GACJR,EAASQ,QAEZ,IAEH,IAwCMC,EAAcN,EAChBJ,EACAA,EAAMW,QAAO,SAAA7C,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,cAAC,EAAD,CAAcuB,QAASc,IACvB,uCACA,8BACE,yBAAQlC,QAAS,kBAAMiC,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGM,EAAYE,KAAK,SAAC9C,EAAM+C,GAAP,OAChB,cAAC,EAAD,CAEE/C,KAAMA,EACNC,iBAAkB,kBAtCD,SAAAa,GACzB,IAAMd,EAAOkC,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,2BAAQlD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDK,EACGe,OAAOT,EAAIoC,GACXlC,MAAK,SAAAmC,GACJhB,EAASD,EAAMY,KAAI,SAAA9C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOmD,SAEpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJzC,EAAKK,QADD,sCAGfiD,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMW,QAAO,SAAAI,GAAC,OAAIA,EAAEnC,KAAOA,SAsBRyC,CAAmBvD,EAAKc,MAF3CiC,QAMX,uBAAMS,SA9DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBtD,QAAS+B,EACTrB,MAAM,IAAI6C,MAAOC,cACjB1D,UAAW2D,KAAKC,SAAW,IAG7BvD,EACGY,OAAOuC,GACP3C,MAAK,SAAAmC,GACJhB,EAASD,EAAMf,OAAOgC,QAmDxB,UACE,uBACEa,MAAO5B,EACP6B,SAlDiB,SAACR,GAExBpB,EAAWoB,EAAMS,OAAOF,UAkDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,SCvFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3859ee86.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className=\"note\">\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  // return request.then(response => response.data)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst noteService = { getAll, create, update }\nexport default noteService","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport './index.css'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  \n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    // console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map( (note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}